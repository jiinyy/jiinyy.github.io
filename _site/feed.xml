<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-11T20:52:52+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Dev Story</title><subtitle>Dev Story</subtitle><author><name>Jihyun Bang</name></author><entry><title type="html">[JS] 연결리스트(2) - 해시테이블</title><link href="http://localhost:4000/2023-03-11/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8(2)" rel="alternate" type="text/html" title="[JS] 연결리스트(2) - 해시테이블" /><published>2023-03-11T00:00:00+09:00</published><updated>2023-03-11T00:00:00+09:00</updated><id>http://localhost:4000/2023-03-11/%08%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8(2)</id><content type="html" xml:base="http://localhost:4000/2023-03-11/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8(2)"><![CDATA[<p>해시 테이블</p>

<p>키와 값을 받아 키를 해싱하여 나온 인덱스에 값을 저장하는 선형 자료구조이다.  삽입은 O(1)이며 키를 알고 있다면 삭제, 탐색도 O(1)로 수행한다.</p>

<p><img src="../assets/hash1.png" alt="Hash Table" /></p>

<h3 id="해시함수---입력받은-값을-특정-범위-내-숫자로-변경하는-함수">해시함수 :  입력받은 값을 특정 범위 내 숫자로 변경하는 함수</h3>

<dl>
  <dt>“Hash Collision” - 해시 충돌</dt>
  <dd>
    <p>해시 함수의 결과가 동일한 값으로 나온 경우</p>
  </dd>
</dl>

<ol>
  <li>선형 탐사법 : 충돌이 발생하면 옆으로 한 칸 이동한다. → 최악의 경우 선형시간 (O(n)) 이 걸릴 수 있음</li>
  <li>제곱 탐사법 : 충돌이 발생 한 지점에서 충돌이 발생한 횟수의 제곱만큼 옆으로 이동한다. → 데이터가 몰리지 않음</li>
  <li>이중 해싱 :  충돌이 발생하면 기존 해시함수가 아닌 다른 해시 함수를 이용하여 새로운 인덱스를 만들어낸다.</li>
  <li>분리 연결법 :  충돌이 발생할 경우 다른 인덱스로 이동하지 않는다. 대신 해시테이블의 요소를 연결리스트  대신 해시테이블의 요소를 연결리스트로 만들어 충돌이 발생한 버킷에 그대로  요소를 추가한다. → 최악의 경우, 하나의 버킷이 무한정 늘어날 수 있다</li>
</ol>

<p><br /><br />
Javascript 에서 해시테이블 사용하기</p>

<ol>
  <li>배열</li>
  <li>객체</li>
  <li>Map ( set, get )</li>
  <li>Set</li>
</ol>

<p><br /><br /><br /></p>
<h3 id="해시-테이블_베스트-앨범-실습">해시 테이블_베스트 앨범 실습</h3>

<p><code class="language-plaintext highlighter-rouge">문제</code></p>

<p>스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다.</p>

<ol>
  <li>속한 노래가 많이 재생된 장르를 먼저 수록합니다.</li>
  <li>장르 내에서 많이 재생된 노래를 먼저 수록합니다.</li>
  <li>
    <p>장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노래를 먼저 수록합니다.
노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays가 주어질 때, 베스트 앨범에 들어갈 노 래의 고유 번호를 순서대로 return 하도록 solution 함수를 완성하세요.
제한사항
• genres[l)는 고유번호가 1인 노래의 장르입니다.
• plays[)는 고유번호가 1인 노래가 재생된 횟수입니다.
• genres와 plays의 길이는 같으며, 이는 1 이상 10,000 이하입니다.
• 장르 종류는 100개 미만입니다.
• 장르에 속한 곡이 하나라면, 하나의 곡만 선택합니다.
• 모든 장르는 재생된 횟수가 다릅니다.</p>

    <p>입출력 예
 <br />
 genres - [‘classic”, “pop”, “classic”, “classic”, “pop’]
 <br />
 plays - [500, 600, 150, 800, 2500]
 <br />
 return -  [4, 1, 3, 0]</p>
  </li>
</ol>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//1. 같은 장르끼리 묶어야해요.</span>
<span class="c1">//2. 묶인 노래들을 재생 순으로 정렬을 해야해요.</span>
<span class="c1">//3. 노래를 2개까지 자르는 작업을 해야해요.</span>
<span class="c1">//핵심 키워드는 "묶는 것", "정렬"</span>
<span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">genres</span><span class="p">,</span> <span class="nx">plays</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">genreMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Map</span><span class="p">();</span>

    <span class="nx">genres</span>
        <span class="p">.</span><span class="nf">map</span><span class="p">((</span><span class="nx">genre</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">genre</span><span class="p">,</span> <span class="nx">plays</span><span class="p">[</span><span class="nx">index</span><span class="p">]])</span>
        <span class="p">.</span><span class="nf">forEach</span><span class="p">(([</span><span class="nx">genre</span><span class="p">,</span> <span class="nx">play</span><span class="p">],</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">genreMap</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">genre</span><span class="p">)</span> <span class="o">||</span> <span class="p">{</span> <span class="na">total</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">songs</span><span class="p">:</span> <span class="p">[]</span> <span class="p">};</span>
            <span class="nx">genreMap</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">genre</span><span class="p">,</span> <span class="p">{</span>
                <span class="na">total</span><span class="p">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">total</span> <span class="o">+</span> <span class="nx">play</span><span class="p">,</span>
                <span class="na">songs</span><span class="p">:</span> <span class="p">[...</span><span class="nx">data</span><span class="p">.</span><span class="nx">songs</span><span class="p">,</span> <span class="p">{</span> <span class="nx">play</span><span class="p">,</span> <span class="nx">index</span> <span class="p">}]</span>
                    <span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">play</span> <span class="o">-</span> <span class="nx">a</span><span class="p">.</span><span class="nx">play</span><span class="p">)</span>
                    <span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
            <span class="p">})</span>
        <span class="p">})</span>
    <span class="k">return</span> <span class="p">[...</span><span class="nx">genreMap</span><span class="p">.</span><span class="nf">entries</span><span class="p">()]</span>
        <span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">total</span> <span class="o">-</span> <span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">total</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">flatMap</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">songs</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">map</span><span class="p">(</span><span class="nx">song</span> <span class="o">=&gt;</span> <span class="nx">song</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Jihyun Bang</name></author><category term="Javascript" /><summary type="html"><![CDATA[해시 테이블]]></summary></entry><entry><title type="html">[JS] 연결리스트 - 스택 &amp;amp; 큐</title><link href="http://localhost:4000/2023-03-10/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8" rel="alternate" type="text/html" title="[JS] 연결리스트 - 스택 &amp;amp; 큐" /><published>2023-03-10T00:00:00+09:00</published><updated>2023-03-10T00:00:00+09:00</updated><id>http://localhost:4000/2023-03-10/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8</id><content type="html" xml:base="http://localhost:4000/2023-03-10/%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8"><![CDATA[<h1 id="연결-리스트">연결 리스트</h1>

<h3 id="각-요소를-포인터로-연결하여-관리하는-선형-자료구조이다-각-요소는-노드라고-부르며-데이터-영역과-포인터-영역으로-구성된다">각 요소를 포인터로 연결하여 관리하는 선형 자료구조이다. 각 요소는 노드라고 부르며 데이터 영역과 포인터 영역으로 구성된다</h3>

<p><code class="language-plaintext highlighter-rouge">특징</code></p>

<ul>
  <li>메모리가 허용하는 한 요소를 제한없이 추가할 수 있다.</li>
  <li>탐색은 O(n) (선형시간) 이 소요된다.</li>
  <li>요소를 추가하거나 제거할 때는 O(1) (상수시간) 이 소요된다.</li>
  <li>Singly Linked List, Double Linked List, Circular Linked Lsit 가 존재한다</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">핵심로직</code></p>

<ul>
  <li>요소 찾기</li>
  <li>요소 추가</li>
  <li>요소 삭제</li>
</ul>

<p><br /></p>
<h2 id="singly-linked-list-단일연결리스트">Singly Linked List (단일연결리스트)</h2>

<p><img src="../assets/singly.png" alt="연결리스트" /></p>

<h2 id="double-linked-list-이중연결리스트">Double Linked List (이중연결리스트)</h2>

<p><img src="../assets/doubly.png" alt="연결리스트" /></p>

<p><br /></p>
<h2 id="circular-linked-list-환형연결리스트">Circular Linked List (환형연결리스트)</h2>

<p><img src="../assets/circular.png" alt="연결리스트" /></p>

<p><br /></p>
<h2 id="스택">스택</h2>

<p>Last In First Out 이라는 개념을 가진 선형자료구조다. 바닥이 막힌 상자를 생각하면 편하다</p>

<p><code class="language-plaintext highlighter-rouge">스택 표현방법</code></p>

<ul>
  <li>배열 (push, pop)</li>
  <li>연결리스트</li>
</ul>

<p><br /></p>
<h2 id="스택_올바른-괄호-실습">스택_올바른 괄호 실습</h2>

<p><code class="language-plaintext highlighter-rouge">문제</code></p>

<p>괄호가 바르게 짝지어졌다는 것은 ‘(‘ 문자로 열렸으면 반드시 짝지어서 ‘)’ 문자로 닫혀야 한다는 뜻입니다. 예를 들어</p>

<ul>
  <li>”()()” 또는 “(())()” 는 올바른 괄호입니다.</li>
  <li>”)()(“ 또는 “(()(“ 는 올바르지 않은 괄호입니다.</li>
</ul>

<p>’(‘ 또는 ‘)’ 로만 이루어진 문자열 s가 주어졌을 때, 문자열 s가 올바른 괄호이면 true를 return 하고, 올바르지 않은 괄호이면 false를 return 하는 solution 함수를 완성해 주세요.</p>

<h3 id="제한사항">제한사항</h3>

<ul>
  <li>문자열 s의 길이 : 100,000 이하의 자연수</li>
  <li>문자열 s는 ‘(‘ 또는 ‘)’ 로만 이루어져 있습니다.</li>
</ul>

<hr />

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">stack</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="nf">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">c</span> <span class="k">of</span> <span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">if </span><span class="p">(</span><span class="nx">c</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">(</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">stack</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">if </span><span class="p">(</span><span class="nx">stack</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">stack</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>

</code></pre></div></div>

<p>stack 에 값을 넣긴했지만 우리는 그 값을 꺼내서 쓰거나 하지는 않는다.</p>

<p>그래서 stack의 방식을 이용하지만 stack을 사용하지 않는 방법으로 조금 더 간단한 코드로 구현해보자</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">solution</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="nf">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">c</span> <span class="k">of</span> <span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">if </span><span class="p">(</span><span class="nx">c</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">(</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">if </span><span class="p">(</span><span class="nx">count</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">count</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">count</span> <span class="o">===</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<p>메모리를 조금 더 적게 사용하여 풀어보았다</p>

<p><br /><br /></p>
<h2 id="큐">큐</h2>

<p>First In First Out 이라는 개념을 가진 선형 자료구조이다. Linear Queue (선형큐) 와  Circular Queue (환형큐) 가 존재한다.</p>

<p><img src="../assets/que.png" alt="연결리스트" /></p>

<h3 id="linear-queue-선형큐">Linear Queue (선형큐)</h3>

<p>아래의 두가지 방식으로 구현할 수 있음</p>

<ul>
  <li>Array(배열) 로 표현하기 ( 스택보다는 좀 어려움)</li>
  <li>Linked list(연결리스트) 로 표현하기</li>
</ul>

<p><strong>큐에서는 shift 함수는 쓰지말자! O(n) 선형시간이 소요되기때문</strong></p>

<p><br /></p>
<h3 id="circular-queue-환형큐">Circular Queue (환형큐)</h3>

<p><img src="../assets/cir_que.png" alt="연결리스트" /></p>

<p>한정된 공간을 효율적으로 사용할때 사용됨</p>

<p>→ 코딩테스트에는 구지 환영큐를 사용해야될 경우는 거의 없음</p>]]></content><author><name>Jihyun Bang</name></author><category term="Javascript" /><summary type="html"><![CDATA[연결 리스트]]></summary></entry><entry><title type="html">[JS] 배열 &amp;amp; 객체</title><link href="http://localhost:4000/2023-03-09/%EB%B0%B0%EC%97%B4&%EA%B0%9D%EC%B2%B4" rel="alternate" type="text/html" title="[JS] 배열 &amp;amp; 객체" /><published>2023-03-09T00:00:00+09:00</published><updated>2023-03-09T00:00:00+09:00</updated><id>http://localhost:4000/2023-03-09/%EB%B0%B0%EC%97%B4&amp;%EA%B0%9D%EC%B2%B4</id><content type="html" xml:base="http://localhost:4000/2023-03-09/%EB%B0%B0%EC%97%B4&amp;%EA%B0%9D%EC%B2%B4"><![CDATA[<h1 id="코딩테스트-광탈-방지-a-to-z">코딩테스트 광탈 방지 A to Z</h1>
<p><img src="../assets/javascript.png" alt="AtoZ" /></p>

<p>재료- 데이터</p>

<p>도구 - 자료구조</p>

<p>레시피 - 알고리즘</p>

<p>요리사 -개발자</p>

<p>요리- 소프트웨어</p>

<p>손님 -  소프트웨어 이용자</p>

<h3 id="자료구조--알고리즘--프로그램">자료구조 + 알고리즘 = 프로그램</h3>
<p><br /></p>
<h1 id="배열순차리스트">배열(순차리스트)</h1>

<p>연관된 데이터를 연속적인 형태로 구성된 구조를 가진다. 배열에 포함된 원소는 순서대로 인덱스(index) 가 붙는다.</p>

<p>중간에 요소를 삭제하거나 추가할 시, O(n) 선형시간이 소요된다.</p>

<p>그러므로 요소 삭제나 추가가 반복되는 로직이라면 배열 사용을 권장하지 않는다.</p>

<h2 id="javascript-에서-배열-사용법">Javascript 에서 배열 사용법</h2>

<h3 id="배열-생성-방법">배열 생성 방법</h3>

<p><code class="language-plaintext highlighter-rouge">Source</code></p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 빈 Array를 생성</span>
<span class="kd">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Array </span><span class="p">()</span> <span class="p">;</span>

<span class="kd">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span> <span class="p">];</span>

<span class="c1">// 미리 초기화된 Array를 생성</span>
<span class="kd">let</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>

<span class="c1">// 많은 값을 같은 값으로 초기화할 경우</span>
<span class="kd">let</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="nc">Array</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">fill</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

<span class="c1">// 특정 로직을 사용하여 초기화할 경우 from을 사용할 수 있음</span>
<span class="kd">let</span> <span class="nx">arr4</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span> <span class="nf">from</span><span class="p">({</span> <span class="na">length</span><span class="p">:</span> <span class="mi">100</span> <span class="p">),</span> <span class="p">(</span><span class="nx">_</span><span class="p">.</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">i</span><span class="p">);</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Output</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[]
[]
[1, 2, 3, 4, 5]
[0, 0, 0, 0, 0]
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
</code></pre></div></div>
<p><br /></p>
<h3 id="배열-요소-추가--삭제">배열 요소 추가 &amp; 삭제</h3>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>

<span class="c1">// 끝에 4 추가</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> 

<span class="c1">// 여러 개를 한 번에 추가 가능</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span> 
<span class="c1">//[1,2,3,4,5,6]</span>

<span class="c1">// 3번 인덱스에 128을 추가</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">128</span><span class="p">);</span> 
<span class="c1">//[1,2,3,128,4,5,6]</span>

<span class="c1">//3번 인덱스 값을 제거</span>
<span class="nx">arr</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr</span> <span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
<span class="c1">// [4]</span>
</code></pre></div></div>
<p><br /></p>
<h2 id="특이점">특이점</h2>

<p>자바스크립트의 배열은 인덱스가 숫자가 아닌 문자열이나, 논리값도 들어갈 수 있다. 이는 자바스크립트의 배열이 근본적으로 객체타입이기 때문이다. <strong>인덱스와 무관한 값을 인덱스로 사용한 경우 길이에 영향을 미치지 않는다.</strong></p>

<p>이러한 코드는 좋은 코드는 아니다. 이러한 특징이 있다는 것만 알아두고 넘어가자</p>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span><span class="nx">length</span><span class="p">)</span>
<span class="c1">// 4</span>

<span class="nx">arr</span><span class="p">[</span><span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="nx">arr</span><span class="p">[</span><span class="kc">false</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">)</span> 
<span class="c1">// [1,1,2,3, string:10 , false:0]</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
<span class="c1">// 4</span>

<span class="nx">arr</span> <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mi">5</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
<span class="c1">// 5</span>

<span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span>
<span class="nx">arr</span><span class="p">.</span><span class="nx">length</span> <span class="o">=</span> <span class="mi">3</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">);</span>  <span class="c1">// [1,2,3]</span>

<span class="kd">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="p">();</span>  <span class="c1">// [ ]</span>

<span class="kd">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">[</span> <span class="p">];</span>  <span class="c1">// [ ] </span>

<span class="kd">const</span> <span class="nx">arr3</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]</span> <span class="c1">// [1,2,3,4,5]</span>

<span class="kd">const</span> <span class="nx">arr4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>  <span class="c1">// [&lt;5 empty items&gt;]</span>

<span class="kd">const</span> <span class="nx">arr5</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Array</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span><span class="nf">fill</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>  <span class="c1">// [5,5,5,5,5]</span>

<span class="kd">const</span> <span class="nx">arr6</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nf">from</span><span class="p">(</span><span class="nc">Array</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="nf">function </span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">k</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">k</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
<span class="p">});</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr6</span><span class="p">)</span>  <span class="c1">// [1,2,3,4,5] → v = 배열의값, k = 배열의 인덱스</span>
</code></pre></div></div>
<p><br /></p>
<h2 id="배열-method">배열 Method</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// join</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">,</span><span class="dl">"</span><span class="p">));</span> <span class="c1">//1,2,3,4,5</span>

<span class="c1">// reverse → reverse 함수는 한번 변경되면 원래 함수에도 영향을 미치므로 주의해서 사용해야한다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nf">reverse</span><span class="p">());</span>  <span class="c1">// [5,4,3,2,1]</span>

<span class="c1">// concat</span>
<span class="kd">const</span> <span class="nx">arr1</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">arr2</span><span class="o">=</span><span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr1</span><span class="p">.</span><span class="nf">concat</span><span class="p">(</span><span class="nx">arr2</span><span class="p">));</span>  <span class="c1">// [1,2,3,4,5,6,7,8,9,10]</span>

<span class="c1">// pop, push, shift, unshift → 뒤에 원소 삭제, 추가 / 앞에 원소 삭제, 추가</span>

<span class="c1">// slice → 배열 중간의 잘라서 값을 알고싶다 &amp; 사용 후에도 원래의 배열에는 영향을 끼치지 않음</span>
<span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">consle</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span> <span class="c1">// [3,4] → index 2번째부터 ~ 4번째 앞 원소까지 잘라낸다.</span>

<span class="c1">// splice → 중간의 배열을 삭제하고 싶다</span>
<span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// [1,2,5,6] → 2번 index 부터 2개를 삭제한다.</span>
</code></pre></div></div>
<p><br /></p>
<h2 id="배열-for-문---for-of-문">배열 (for 문 /  for of 문)</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>

<span class="nf">for </span><span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span><span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">;</span>  <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nf">arr</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 1,2,3,4,5,6</span>

<span class="nf">for </span><span class="p">(</span><span class="kd">const</span> <span class="nx">item</span> <span class="k">of</span> <span class="nx">arr</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">item</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// 1,2,3,4,5,6</span>
</code></pre></div></div>
<p><br /></p>
<h1 id="객체">객체</h1>

<h2 id="객체-생성">객체 생성</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="p">(</span> <span class="p">);</span>  <span class="c1">// { }</span>

<span class="kd">const</span> <span class="nx">obj2</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>  <span class="c1">// { }</span>

<span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">amy’ , age: </span><span class="dl">'</span><span class="mi">29</span><span class="dl">'</span><span class="s1">};
</span></code></pre></div></div>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 객체 추가</span>
<span class="nx">obj</span><span class="p">[</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">wlgysdl3@naver.com</span><span class="dl">"</span>
<span class="p">[</span><span class="nx">obj</span><span class="p">.</span><span class="nx">phone</span><span class="p">](</span><span class="nx">http</span><span class="p">:</span><span class="c1">//obj.phone) = “01000000000"       </span>

<span class="c1">// 객체 내 정보 삭제 </span>
<span class="k">delete</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">phone</span><span class="p">;</span>

<span class="c1">// in operator 를 이용하여 key 가 있는지 확인하기.</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">email</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">);</span>   <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">phone</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">);</span>  <span class="c1">// false</span>

<span class="c1">// 객체 내 key 와 value 집합 구하기</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nf">keys</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// ["name", “age", “email"] → 배열의 형태로 key 나옴 </span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nf">values</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// ["amy", “29", “wlgysdl3@naver.com"] → 배열의 형태로 value 나옴</span>
</code></pre></div></div>
<p><br /></p>
<h2 id="for-in-문">for in 문</h2>

<div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">amy</span><span class="dl">'</span> <span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="dl">'</span><span class="s1">29</span><span class="dl">'</span><span class="p">};</span>  

<span class="nf">for </span><span class="p">(</span> <span class="kd">const</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
<span class="p">}</span>

<span class="c1">// name amy </span>
<span class="c1">// age 29 </span>
<span class="c1">// email wlgysdl3@naver.com</span>
</code></pre></div></div>]]></content><author><name>Jihyun Bang</name></author><category term="Javascript" /><summary type="html"><![CDATA[코딩테스트 광탈 방지 A to Z]]></summary></entry><entry><title type="html">[JS] 반복문</title><link href="http://localhost:4000/2023-03-08/%EB%B0%98%EB%B3%B5%EB%AC%B8" rel="alternate" type="text/html" title="[JS] 반복문" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/2023-03-08/%EB%B0%98%EB%B3%B5%EB%AC%B8</id><content type="html" xml:base="http://localhost:4000/2023-03-08/%EB%B0%98%EB%B3%B5%EB%AC%B8"><![CDATA[<h1 id="while-문">while 문</h1>

<h3 id="반복문"><strong>반복문</strong></h3>

<p>조건에 따라 프로그램의 일정 코드를 반복적으로 수행할 수 있도록 하는 구문</p>

<h3 id="while"><strong>while</strong></h3>

<p>조건이 만족하는 동안 반복실행될 코드를 계속 실행</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">while</span><span class="p">(</span> <span class="cm">/*조건식*/</span> <span class="p">){</span>
    <span class="cm">/*반복 실행될 코드*/</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="continue-break"><strong>continue, break;</strong></h3>

<ul>
  <li>continue : 남은 반복실행될 코드를 모두 skip</li>
  <li>break : 반복문에서 즉시 탈출</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">sumFrom1ToN</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

    <span class="nf">while</span><span class="p">(</span> <span class="nx">count</span><span class="o">&lt;=</span> <span class="nx">n</span> <span class="p">){</span>
        <span class="nx">sum</span> <span class="o">=</span> <span class="nx">sum</span> <span class="o">+</span><span class="nx">count</span><span class="p">;</span>
        <span class="nx">count</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="do-while-문">do while 문</h1>

<h3 id="do-while"><strong>do, while</strong></h3>

<p>한번은 코드가 실행되고, 이후에 반복실행될지 말지를 결정</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">do</span> <span class="p">{</span><span class="cm">/* 반복 실행될 코드 */</span>
<span class="p">}</span> <span class="nf">while</span><span class="p">(</span><span class="cm">/*조건식*/</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="조건식이-거짓false-일-때"><strong>조건식이 거짓(False) 일 때,</strong></h3>

<ul>
  <li>while : 한번도 실행되지 않음</li>
  <li>do, while : 한번은 실행되고 종료</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">cond</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

<span class="nf">while</span><span class="p">(</span><span class="nx">cond</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">이 구문은 실행되지 않습니다.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">do</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">이 구문은 한번은 실행합니다.</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span> <span class="nf">while</span><span class="p">(</span><span class="nx">cond</span><span class="p">);</span>

<span class="k">do</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">ans</span> <span class="o">=</span> <span class="nf">parseInt </span><span class="p">(</span><span class="nf">promp</span><span class="p">(</span><span class="dl">"</span><span class="s2">1+1=?</span><span class="dl">"</span><span class="p">));</span>
<span class="p">}</span> <span class="nf">while</span><span class="p">(</span><span class="nx">ans</span> <span class="o">!=</span><span class="mi">2</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">맞췄습니다.</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<hr />

<h1 id="for-문">for 문</h1>

<h3 id="for"><strong>for</strong></h3>

<p>초기구문, 업데이트 구문, 반복조건 을 한 구문에 합친 반복문.</p>

<h3 id="04까지-더하는-동일한-while문과-for문"><strong>0~4까지 더하는 동일한 while문과 for문.</strong></h3>

<h3 id="while-문-1">while 문</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//초기 설정 코드</span>
<span class="nf">while </span><span class="p">(</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span> <span class="cm">/*조건식*/</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nx">sum</span> <span class="o">=</span> <span class="nx">sum</span> <span class="o">+</span> <span class="nx">i</span><span class="p">;</span>
    <span class="nx">i</span><span class="o">++</span><span class="p">;</span> <span class="c1">//업데이트 코드</span>
    <span class="p">}</span>
</code></pre></div></div>

<h3 id="for문">for문</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nf">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nx">sum</span> <span class="o">=</span> <span class="nx">sum</span> <span class="o">+</span> <span class="nx">i</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>for 문에서 continue 문을 만나면 update 문 실행 후 조건식을 비교 (update 문 = i++)</p>

<p>while 문에서 continue 문을 만났다면 반복실행 끝으로 이동 후 바로 조건식을 비교</p>

<h1 id="for-in문">for in문</h1>

<h3 id="for-in"><strong>for in</strong></h3>

<p>객체의 각 엘리먼트에 접근할 수 있는 반복문.</p>

<h3 id="객체의-속성들을-출력하는-동일한-코드"><strong>객체의 속성들을 출력하는 동일한 코드</strong></h3>

<h3 id="for-in문을-이용해서-obj의-속성중-number-타입의-값을-모두-더해서-sum에-저장하도록-빈칸을-채워-코드를-완성해-보세요">for in문을 이용해서 obj의 속성중, number 타입의 값을 모두 더해서 sum에 저장하도록 빈칸을 채워 코드를 완성해 보세요.</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">object</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">age</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
    <span class="na">weight</span><span class="p">:</span> <span class="mi">5</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nf">for </span><span class="p">(</span><span class="kd">var</span> <span class="nx">num</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">if</span><span class="p">(</span> <span class="nf">typeof</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">num</span><span class="p">])</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">number</span><span class="dl">"</span> <span class="p">){</span>
        <span class="nx">sum</span> <span class="o">=</span> <span class="nx">sum</span> <span class="o">+</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">num</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">sum :</span><span class="dl">"</span><span class="p">,</span> <span class="nx">sum</span><span class="p">);</span>
</code></pre></div></div>]]></content><author><name>Jihyun Bang</name></author><category term="Javascript" /><summary type="html"><![CDATA[while 문]]></summary></entry></feed>